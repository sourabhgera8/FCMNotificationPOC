import React from 'react';
// import React, { useEffect } from 'react';
import {
	Platform, Alert
} from 'react-native'
import messaging from '@react-native-firebase/messaging';
import PushNotification from 'react-native-push-notification'
import PushNotificationIOS from '@react-native-community/push-notification-ios'

class LocalNotificationService {

	configure = (onOpenNotification) => {
		PushNotification.configure({
			onRegister: function (token) {
				console.log("R_____ [LocalNotificationService] onRegister ", token);
			},
			onNotification: function (notification) {
				console.log("R_____ [LocalNotificationService] onNotification ", notification);
				if (!notification?.data) {
					return
				}
				notification.userInteraction = true;
				onOpenNotification(Platform.OS === 'ios' ? notification.data.item : notification.data)

				// only call callback if not from background 
				if (Platform.OS === 'ios') {
					// (required) Called when a remote is received or opened, or local notification is opened
					notification.finish(PushNotificationIOS.FetchResult.NoData)
				}
			},


			// avneesh file 
			// (optional) Called when Registered Action is pressed and invokeApp is false, if true onNotification will be called (Android)	
			onAction: function (notification) {
				// process the action	
			},
			// (optional) Called when the user fails to register for remote notifications. Typically occurs when APNS is having issues, or the device is a simulator. (iOS)	
			onRegistrationError: function (err) {
			},


			// IOS Only (optional): default : all - Permission to register.

			permissions: {
				alert: true,
				badge: true,
				sound: true,
			},
			// Should the initial notification be popped automatically
			// default: true
			popInitialNotification: true,

			/**
			 * (optional) default: true
			 * - Specified if permissions (ios) and token (android and ios) will requested or not,
			 * - if not, you must call PushNotificationsHandler.requestPermissions() later
			 * - if you are not using remote notification or do not have Firebase installed, use this:
			 *     requestPermissions: Platform.OS === 'ios'
			 */
			requestPermissions: true,
		})
	}

	unRegister = () => {
		PushNotification.unRegister();
	}

	showNotification = (id, title, message, data = {}, options = {}) => {
		PushNotification.localNotification({

			...this.buildAndroidNotification(id, title, message, data, options),
			...this.buildIosNotification(id, title, message, data, options),
			// buildIosNotification();

			/* iOS and Android properties */
			// id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
			title: title || "My Title", // (optional)
			message: message || "My Message", // (required)
			userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
			// playSound: options.playSound || false, // (optional) default: true
			playSound: options.playSound || true, // (optional) default: true
			soundName: options.soundName || "default", // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
			userInteraction: false,
			// number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
			// repeatType: "day", // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
		});
	}

	buildAndroidNotification = (id, title, message, data, options) => {
		return {
			id: id,
			autoCancel: true, // (optional) default: true
			largeIcon: options.largeIcon || "ic_launcher", // (optional) default: "ic_launcher". Use "" for no large icon.
			largeIconUrl: options.largeIconUrl || "https://www.example.tld/picture.jpg", // (optional) default: undefined
			smallIcon: options.smallIcon || "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher". Use "" for default small icon.
			bigText: "message is "+message || "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
			subText: "title is "+title || "This is a subText", // (optional) default: none		
			vibrate: options.vibrate || true, // (optional) default: true
			vibration: options.vibration || 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
			priority: options.priority || "high", // (optional) set notification priority, default: high
			impotance: options.impotance || "high", // (optional) add group to message
			data: data,
			playSound: true,
			soundName: "default",	
		}
	}

	buildIosNotification = (id, title, message, data, options) => {
		console.log("R_____ [LocalNotificationService] buildIosNotification ", id);
		console.log("R_____ [LocalNotificationService] buildIosNotification ", title);
		console.log("R_____ [LocalNotificationService] buildIosNotification ", message);
		console.log("R_____ [LocalNotificationService] buildIosNotification ", data);
		console.log("R_____ [LocalNotificationService] buildIosNotification ", options);

		return {
			alertAction: options.largeIcon || "view",
			category: options.category || "",
			userInfo: {
				id: id,
				data: data
			}
		}
	}

	cancelAllLocalNotifications = () => {
		if (Platform.OS === 'ios') {
			PushNotificationIOS.removeAllDeliveredNotifications();
		} else {
			PushNotification.cancelAllLocalNotifications();
		}
	}

	removeDeliveredNotificationById = (notifationId) =>{
		console.log("R_____ [LocalNotificationService] removeDeliveredNotificationById ", notifationId);
		PushNotification.cancelLocalNotifications({id: `${notifationId}`});
	}

}

export const localNotificationService = new LocalNotificationService()
